name: Enterprise-app CI/CD

on:
  push:
    branches: ["master"]
    paths:
      - "**.cs"
      - "**.json"
      - "**.csproj"
      - "**.proto"
      - "**Dockerfile"
      - "**.yaml"
      - "**.yml"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.x

      - name: Replace CONNECTION_STRING
        run: |
          SECRET_VALUE="${{ secrets.CONNECTION_STRING }}"
          sed -i "s|\"PlatformDBConnection\": \"\"|\"PlatformDBConnection\": \"${SECRET_VALUE}\"|" ./PlatformService/appsettings.template.json
        shell: bash

      - name: Display appsettings.template.json
        run: cat ./PlatformService/appsettings.template.json

      - name: Build
        run: |
          dotnet build Enterprise-architecture.sln

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.x

      - name: Test
        run: |
          dotnet test Enterprise-architecture.sln

  docker_build_push:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Docker credentials
        run: |
          echo "DOCKER_USER=$DOCKER_USER" >> $GITHUB_ENV
          echo "DOCKER_SECRET=$DOCKER_SECRET" >> $GITHUB_ENV
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_SECRET: ${{ secrets.DOCKER_SECRET }}

      - name: Display appsettings.template.json
        run: cat ./PlatformService/appsettings.template.json

      - name: Build and push images
        run: |
          docker build -t $DOCKER_USER/platform-service-api:v1 ./PlatformService
          # docker build -t $DOCKER_USER/command-service-api:v1 ./CommandsService
          echo "$DOCKER_SECRET" | docker login -u $DOCKER_USER --password-stdin
          docker push $DOCKER_USER/platform-service-api:v1
          # docker push $DOCKER_USER/command-service-api:v1
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_SECRET: ${{ secrets.DOCKER_SECRET }}

  kubernetes:
    runs-on: ubuntu-latest
    needs: docker_build_push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.x

      # Install kubectl
      # - name: Install kubectl
      #   run: |
      #     curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubectl
      #     chmod +x ./kubectl
      #     sudo mv ./kubectl /usr/local/bin/kubectl

      # # Install Helm
      # - name: Install Helm
      #   run: |
      #     curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      # # Install Helm chart
      # - name: Install Helm chart
      #   run: |
      #     helm repo add bitnami https://charts.bitnami.com/bitnami
      #     helm repo update
      #     helm upgrade --install platform-service ./helm/platform-service --set image.repository=${{ secrets.DOCKER_HUB_USERNAME }}/platform-service-api --set image.tag=${{ github.sha }} --set image.pullPolicy=Always --set service.type=LoadBalancer --set service.port=80 --set service.targetPort=80 --set service.nodePort=30000 --set service.loadBalancerIP=${{ secrets.LOAD_BALANCER_IP }} --set service.loadBalancerSourceRanges={${{ secrets.LOAD_BALANCER_SOURCE_RANGES }}}
      #     helm upgrade --install command-service ./helm/command-service --set image.repository=${{ secrets.DOCKER_HUB_USERNAME }}/command-service-api --set image.tag=${{ github.sha }} --set image.pullPolicy=Always --set service.type=LoadBalancer --set service.port=80 --set service.targetPort=80 --set service.nodePort=30001 --set service.loadBalancerIP=${{ secrets.LOAD_BALANCER_IP }} --set service.loadBalancerSourceRanges={${{ secrets.LOAD_BALANCER_SOURCE_RANGES }}}
